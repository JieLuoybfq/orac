An introduction to ORAC for a new user
--------------------------------------

Documentation for ORAC is now managed through a Wiki system, found at:
  http://proj.badc.rl.ac.uk/orac/wiki
The text below is a copy of the text on 27 Jan 2014, though you are strongly
encouraged to use the Wiki system as it will be the most up-to-date version.

--------------------------------------

The Optimal Retrieval of Aerosol and Cloud (ORAC) is an optimal
estimation scheme that determines aerosol and cloud properties from
multispectral imagery. There are two separate components to the
software - the pre-processor and the processor itself. The
pre-processor takes a number of satellite and other data files to
produce a set of NetCDF files. Those files are the inputs for the main
processor, which outputs the results of the retrieval into two further
NetCDF files.

You will require:
- SVN, a version control package. It can be found at
http://subversion.tigris.org/.
- a Fortran 90 compiler. The author of these instructions used ifort
on an Ubuntu 12 system.

The source code for ORAC is stored at
http://proj.badc.rl.ac.uk/orac. The homepage of this site presents a
wiki-style set of instructions. The source code itself can be viewed
in a browser by clicking "Browse Source" along the top bar of the
page. You will be asked for a login, which is managed through the
BADC.
- You must have an account with the BADC, which can be obtain at
http://badc.nerc.ac.uk/reg/user_register_info.html.  
- You must be added as a developer. To do so, email Don Grainger
(r.grainger@â€¦) and ask to be added as an SVN and trac user for
ORAC. This may take a few days.
- Once you have been made a developer, it is advised you join the ORAC
developer's mailing list. To do so, create an account with
http://www.jiscmail.ac.uk, go to http://www.jiscmail.ac.uk/devorac,
click "Subscribe or Unsubscribe", select your desired preferences,
click "Subscribe", and click the link in the confirmation email that
you will eventually receive.

Once logged in, the web interface presents you with a series of
folders. 'trunk' is your primary concern, which contains all of the
source code for ORAC. Files can be viewed through this interface and
their various versions compared. However, this interface is primarily
for inspecting the files, not altering or using them. Of particular
use is the "Revision Log" link at the top right of the page for any
code, which can be used to track changes over any number of revisions.

To download a copy of the ORAC source code, open a terminal and change
directory to the folder in which you wish to store the files. Use the
command:
   svn checkout http://proj.badc.rl.ac.uk/orac/trunk 
This will produce a local working copy of the source code on your
machine. For a brief description of the other SVN commands you will
require to update the source, view
http://proj.badc.rl.ac.uk/orac/trunk/docs/ORAC_Mini_SVN_guide.pdf
and/or the SVN book (
http://svnbook.red-bean.com/en/1.7/svn-book.pdf).

Broadly, the folder structure is:
docs - Documentation, largely similar to that shown in the wiki.  
idl - Assorted plotting and visualisation codes for ORAC's output written
in IDL.  
pre_processing - The ORAC pre-processor, which converts a set of
satellite and other data files into NCDF files that ORAC can read. The
source code is within the folders 'C' and 'modis', with the others
containing various data files.
src - The ORAC processor source code.  Having obtained the ORAC source
code, one must now compile it.

--------------------------------------
The Pre-processor
--------------------------------------

The pre-processor code is in the folder
http://proj.badc.rl.ac.uk/orac/trunk/pre_preprocessing and is
compiled with a Makefile. This is controlled by two files:
- The archfile, which sets the Fortran and C compilers to be used and
the settings for those compilers; 
- The libfile, which lists the paths to all the libraries required by
the compilers.

Paths to these files are given at the top of the Makefile and they
should be stored in this directory. Every group using ORAC has its own
local version of these files, many of which are uploaded to the
repository for your inspection. If you make your own version of these
files, please edit your Makefile to point to them.

ORAC requires several libraries, which you will need to obtain and
(most likely) compile. These are:
- HDF4 and 5 which use the SZIP, ZLIB, and JPEG libraries. These can be
found at http://www.hdfgroup.org;
- HDF-EOS, which can be found at the same site;
- NetCDF at http://www.unidata.ucar.edu; 
- The ECMWF GRIB API at
https://software.ecmwf.int/wiki/display/GRIB/Home;
- JASPER at http://www.ece.uvic.ca/~frodo/jasper/;
- RTTOV at
http://research.metoffice.gov.uk/research/interproj/nwpsaf/rtm/;
- BEAM, used to read ENVISAT files, at https://github.com/bcdev/epr-api;
- OPENJPEG at http://www.openjpeg.org/index.php?menu=download.

Having obtained these libraries and listed their locations in the
libfile, the pre-processor is compiled with the command 'make'. The
Fortran and C compilers will produce a number of object and module
files, which are stored in a separate folder (defined in the archfile
by the variable OBJS). The final result is the executable
orac_preproc.x.

Due to the large number of arguments for the pre-processor, it is
called with the shell script
http://proj.badc.rl.ac.uk/orac/browser/trunk/pre_processing/run_preproc.sh. You
should produce a local version of this file, corresponding to your own
file structure. The first block of variables defined in that script
are details to be added to the header of the output files. Then:
- LD_LIBRARY_PATH is an environment variable listing the locations of
the libraries mentioned above;
- path_to_coeffs should point to the directory
http://proj.badc.rl.ac.uk/orac/trunk/pre_preprocessing/coeffs or
similar files setting the coefficients for RTTOV;
- path_to_emiss_atlas should point to a folder containing 0.5 degree HSR
emissivity data, which can be found at
http://cimss.ssec.wisc.edu/iremis/;
- path_to_calib should point to a folder of files specifying the AATSR
drift correction, which can be found at
http://www.aatsrops.rl.ac.uk/EDSX/OtherInfo/Details (the author uses
AATSR_VIS_DRIFT_V02-05.DAT);
- path_to_l1b and path_to_geo list the filenames of the satellite data
and matching geolocation data. For AATSR, these are identical;
- sensor is a string listing the name of the satellite processed (MODIS,
AVHRR, AATSR); gridflag, dellon, and dellat are settings that control
the ORAC grid that you likely do not need to change;
- path_to_output lists the folder into which the output files should be
written;
- path_to_ecmwf should point to a folder of ECMWF reanalyses, at
http://badc.nerc.ac.uk/data/ecmwf-era-interim/;
- path_to_albedo should point to a folder of MODIS albedo measurements
(MCF43C3), found at http://ladsweb.nascom.nasa.gov;
- path_to_ice should point to a folder of daily grided ice and snow
cover, found at ftp://n4ftl01u.ecs.nasa.gov/SAN/OTHR/;
- path_to_emissivity should point to a folder of
global_emis_inf10_monthFilled_MYD11C3 files, also found at
http://ladsweb.nascom.nasa.gov;
- badc is a binary flag that, when 1, indicates that BADC ECMWF files
are in use; daynight is a control for ATSR. When set to 1, only day
pixels are read, while 2 selects night;
- chunkproc is a binary flag that, when 1 and processing an AATSR file,
produces a series of files with no more than 4096 lines rather than a
single output;
- startx,endx are used to specify which pixels in the across-track
direction should be processed, using Fortran-style array referencing
(from 1). starty,endy similarly specify the along-track direction. Any
of these settings are only considered if all four values are
non-zero. Otherwise, the entire file is processed.

After running the script, eleven NetCDF files should be
produced. These have the same root name followed by the suffixes:
- alb, the albedo and emissivity data;
- clf, the cloud flag;
- config, the configuration information for the main processor;
- geo, the geolocation data (i.e. satellite and solar zenith angle);
- loc, the latitude and longitude of each pixel;
- lsf, the land-sea flag;
- lwrtm, the longwave radiative transfer model output;
- msi, the satellite radiances;
- - prtm, the meteorological outputs of the radiative transfer model;
swrtm, the shortwave radiative transfer model output;
- uv, the scan indices of each pixel.

--------------------------------------
The ORAC processor
--------------------------------------

The main processor is in the folder
http://proj.badc.rl.ac.uk/orac/trunk/src and is compiled with a
Makefile. This is controlled by two files:
- The archfile, which sets the Fortran and C compilers to be used and
the settings for those compilers;
- The libfile, which lists the paths to all the libraries required by
the compilers.

Paths to these files are given at the top of the Makefile and they
should be stored in this directory. Every group using ORAC has its own
local version of these files, many of which are uploaded to the
repository for your inspection. If you make your own version of these
files, please edit your Makefile to point to them.

The main processor only needs to be linked to the NetCDF library.

Having obtained these libraries and listed their locations in the
libfile, the pre-processor is compiled with the command 'make'. The
Fortran and C compilers will produce a number of object and module
files, which are stored in a separate folder (defined in the archfile
by the variable OBJS). The final result is the executable orac.

Before running ORAC, it is necessary to increase the stack size of
your machine. To do so, run,
   ulimit -s 250000
on a Bourne, Korn, or Bash shell or,
   limit stacksize 250000
on a C shell.

ORAC is driven by a driver file. The path to this text file should be
passed to ORAC as a command line argument (or through the environment
variable ORAC_TEXTIN). Examples of these files can be found at
http://proj.badc.rl.ac.uk/orac/trunk/src/modis_driver.txt and
http://proj.badc.rl.ac.uk/orac/trunk/src/aatsr_driver.txt. These
comprise 9 lines:

The folder in which the output of the pre-processor can be found.
- The root filename of the ten files to be processed.
- The folder into which the output of ORAC should be stored.
- The folder in which the instrument channel look-up tables can be
found. These are stored in the folder sad_dir on the repository.
- The name of the instrument that will be processed.
- The number of channels available in the input files.
- A list of space-delimited flags indicating for each channel
  available in the input files if it should be processed (1=yes; 0=no).
- The cloud class to be used. Possibilities are WAT, for water cloud,
and ICE, for ice cloud.

After running, two NetCDF files should be produced. These will start
with the root filename, followed by the cloud class, then:
- primary, which contains the retrieved variables, their uncertainty,
quality control information, and geolocation information; 
- secondary, summarises the measurements and a priori information input
into the retrieval.

In addition, two text files are produced - diag and log -
which contain log information output by the code. In the current
implimentation, these files are blank except in the event of an
error. This behaviour can be controlled with the routines WriteDiag
and WriteLog.